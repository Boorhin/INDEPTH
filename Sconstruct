from rsf.proj import *
import os, sys

def twodip2(nj1,nj2,extra):
    return '''twodip2 order=3 nj1=%d nj2=%d eps=8 verb=n gauss=n''' % (nj1,nj2) + extra

def grey(title):
    return '''
    grey crowd1=0.8 label1="Time (s)" label2="Offset (km)"
    title="%s"
    ''' % title

####DATA LOADING
Flow('TIB01_A.rsf TIB01_AT.rsf TIB01_AH.rsf TIB01_AB.rsf', "TIB01_56-175.sgy",
    '''
    segyread tape="$SOURCE" tfile=${TARGETS[1]} hfile=${TARGETS[2]} bfile=${TARGETS[3]}
''',stdin=0)

Flow('TIB01_B.rsf TIB01_BT.rsf TIB01_BH.rsf TIB01_BB.rsf', "TIB01_176-275.sgy",
    '''
    segyread tape="$SOURCE" tfile=${TARGETS[1]} hfile=${TARGETS[2]} bfile=${TARGETS[3]}
''',stdin=0)

Flow('TIB01_C.rsf TIB01_CT.rsf TIB01_CH.rsf TIB01_CB.rsf', "TIB01_276-375.sgy",
    '''
    segyread tape="$SOURCE" tfile=${TARGETS[1]} hfile=${TARGETS[2]} bfile=${TARGETS[3]}
''',stdin=0)

Flow('TIB01_D.rsf TIB01_DT.rsf TIB01_DH.rsf TIB01_DB.rsf', "TIB01_376-475.sgy",
    '''
    segyread tape="$SOURCE" tfile=${TARGETS[1]} hfile=${TARGETS[2]} bfile=${TARGETS[3]}
''',stdin=0)

Flow('TIB01_E.rsf TIB01_ET.rsf TIB01_EH.rsf TIB01_EB.rsf', "TIB01_476-581.sgy",
    '''
    segyread tape="$SOURCE" tfile=${TARGETS[1]} hfile=${TARGETS[2]} bfile=${TARGETS[3]}
''',stdin=0)

###Shot processing

### to do:
# call python script to generate files Cube, Header, CMPs
# Export mask from python and apply it to Cube to get rid of l
# Find out about statics

#	 Remove Ground Roll in shot receiver space by rotating 
#    then dip-filter the low velocity component 
#    and trashing the low frequency, back rotating after
# Cube.rsf comes from a python script for data consolidation
l = [1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 109, 110, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 428, 429, 430, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445]

for i in l:
    Shot = 'Shots/Shot_'+str(i)
#bug X axis
    Flow(Shot,'Cube.rsf', 'window f3=%d n3=1'%i) 
    Vo = 1000
    padding = 1500
    nj = (3,2) 
    Flow('tilted/tilted%s'%i, Shot, 'pad beg1=%d | stretch rule=l v0=%d half=n delay=0 verb=y'%(padding, Vo))
    Flow('noiz/noiz%s'%i,'tilted/tilted%s'%i,'bandpass fhi=10 | mutter v0=%d half=n'%(Vo*2))
    Flow('sign/sign%s'%i,'tilted/tilted%s'%i,'bandpass flo=10')
    Flow('mask/mask%s'%i,'noiz/noiz%s'%i, 'math output="abs(input)" | mask min=0.02 | dd type=float')
    Flow('dat2/dat2_%s'%i,['tilted/tilted%s'%i,'mask/mask%s'%i],'add mode=p ${SOURCES[1]}')
    Flow('ndip/ndip%s'%i,'noiz/noiz%s'%i,'twodip2 order=3 nj1=%d nj2=%d eps=8 verb=n gauss=n p0=2 q0=-2'%(nj[0],nj[0]))
    Flow('sdip/sdip%s'%i,'sign/sign%s'%i,twodip2(nj[1],nj[1],'p0=-2 q0=2'))
    Flow('pq/pq%s'%i,['dat2/dat2_%s'%i,'sdip/sdip%s'%i,'ndip/ndip%s'%i,'mask/mask%s'%i],twodip2(nj[1],nj[0],'dip1=${SOURCES[1]} dip2=${SOURCES[2]} mask=${SOURCES[3]}'))
    Flow('sdip2/sdip2_%s'%i,'pq/pq%s'%i,'window n3=1')
    Flow('ndip2/ndip2_%s'%i,'pq/pq%s'%i,'window f3=1')
    Flow('signoi/signoi%s'%i,['dat2/dat2_%s'%i,'sdip2/sdip2_%s'%i,'ndip2/ndip2_%s'%i],'''
         planesignoi sdip=${SOURCES[2]} ndip=${SOURCES[1]} 
         order=3 nj1=%d nj2=%d eps=2 verb=n niter=100'''%nj)
    #back rotate
    Flow('noiz2/noiz2_%s'%i,'signoi/signoi%s'%i,'window n3=1 | lmostretch inv=y v0=%d half=n delay=0 | window f1=%d'%(Vo,padding))
    Flow('sign2/sign2_%s'%i,['signoi/signoi%s'%i,'mask/mask%s'%i,'tilted/tilted%s'%i,'dat2/dat2_%s'%i],'''
         window f3=1 |
         add mode=p ${SOURCES[1]} | add scale=1,1,-1 ${SOURCES[2:4]} |
         lmostretch inv=y v0=%d half=n delay=0 | window f1=%d'''%(Vo, padding))
    Flow('lowf/lowf%s'%i,'sign2/sign2_%s'%i,'bandpass fhi=8')
    Flow('sign3/sign3_%s'%i,['sign2/sign2_%s'%i,'lowf/lowf%s'%i],'add scale=1,-1 ${SOURCES[1]}')
    Flow('noiz3/noiz3_%s'%i,['noiz2/noiz2_%s'%i,'lowf/lowf%s'%i],'add ${SOURCES[1]}')
#    Flow(Shot+'-GR',[Shot, 'noiz3/noiz3_%s'%i], 'add scale=1,-1 ${SOURCES[1]}')
    Plot('Fig/PShot_%s'%i, Shot, 'window max1=10 | grey title=%s gpow=1'%Shot)
    Plot('Fig/Psign_%s'%i,'sign3/sign3_%s'%i, 'window max1=10 | grey title=%s_signal gpow=1'%Shot)
    Plot('Fig/Pnoiz_%s'%i,'noiz3/noiz3_%s'%i, 'window max1=10 | grey title=%s_noise gpow=1'%Shot)
    Result('Fig/Compare_%s'%i, ['Fig/PShot_%s'%i, 'Fig/Psign_%s'%i, 'Fig/Pnoiz_%s'%i],'SideBySideAniso')
    
End()
