#!/usr/bin/csh
from rsf.proj import *
import os, sys
os.environ['SFPENOPTS'] = 'bgcolor=w'
from rsf.recipes.velcon import velcon

def twodip2(nj1,nj2,extra):
    return '''twodip2 order=3 nj1=%d nj2=%d eps=8 verb=n gauss=n''' % (nj1,nj2) + extra

def grey(title):
    return '''
    grey crowd1=0.8 label1="Time (s)" label2="Offset (km)"
    title="%s"
    ''' % title
def dip(slow2):
    return '''math output="(%g*x2/x1)" | mutter half=n v0=1400 tp=0.4''' % (slow2*d2/d1)
d1=0.004
d2=25 #Offset sampling, theoretical (practice 50)

######################## DATA LOADING ################################
########################################################################
Flow('RSF/TIB01 RSF/TIB01_T RSF/TIB01_H RSF/TIB01_B', 'TIB01.sgy','segyread tape="$SOURCE" tfile=${TARGETS[1]} hfile=${TARGETS[2]} bfile=${TARGETS[3]}',stdin=0 )
Flow('RSF/Cube', 'RSF/TIB01', 'sfintbin axis=n2 xk=tracf yk=fldr mask="Utils/Cube_mask.rsf" map="Utils/Cube_map.rsf"')
Flow('Utils/Scalel', 'RSF/TIB01_T', 'headermath output="scalel"| dd type=float | window')
Flow('Utils/Xr', 'RSF/TIB01_T', 'headermath output="gx" | dd type=float | window')
Flow('Utils/Yr', 'RSF/TIB01_T', 'headermath output="gy" | dd type=float | window')
Flow('Utils/Xr_Sc', 'Utils/Xr Utils/Scalel', 'math x=${SOURCES[1]} output=input/x')
Flow('Utils/Yr_Sc', 'Utils/Yr Utils/Scalel', 'math x=${SOURCES[1]} output=input/x')
Flow('Utils/XYr', 'Utils/Xr_Sc Utils/Yr_Sc', 'cat axis=2 ${SOURCES[1]} | window | transp')
Flow('Utils/Offsets', 'RSF/TIB01_T', 'headermath output="offset" | dd type=float | math output="abs(input)/2" | window | put label1="offset"')
Flow('Utils/fldr', 'RSF/TIB01_T', 'headermath output="fldr"| window')
Flow('Utils/OffShot', 'Utils/Offsets Utils/fldr', 'cat axis=2 ${SOURCES[1]} | window | transp ')
Flow('Utils/cdp', 'RSF/TIB01_T', 'headermath output="cdp" | dd type=float | window| put label1="cdp"')
Flow('Utils/OffCdp', 'Utils/Offsets Utils/cdp', 'cat axis=2 ${SOURCES[1]}| transp')
Flow('Utils/Shot_Mask','', 'spike n1=120 mag=0 | dd type=int')


######## Remove Ground Roll in shot receiver space by rotating ########
############  then dip-filter the low velocity component ##############
########  and trashing the low frequency, back rotating after #########
############# Plane-wave destruction method from Fomel ################
NaNShots = [3, 4, 14, 108, 157, 171, 254, 257, 302]
DeadShots =[0, 5, 6, 27, 28, 40, 41, 50, 51, 55, 77, 78, 90, 110, 112, 115, 116, 124, 125, 141, 158, 159, 177, 192, 208, 209, 226, 241, 244, 306, 307, 318, 319, 325, 326, 344, 345, 358, 359, 364, 383, 384, 405, 406, 428, 428, 440, 441]
All, MaskedShots = [], []
#need to map the velocities along the line
Vo= 1794
MaxAlt = 4573599
# for i in range(456):
#     Shot ='Shots/Shot_'+str(i)
#     Trace ='Trace/Trace_'+str(i)
#     tilted ='tilted/tilted%s'%i
#     noiz ='noiz/noiz%s'%i
#     sign ='sign/sign%s'%i
#     mask ='mask/mask%s'%i
#     dat2 ='dat2/dat2_%s'%i
#     ndip ='ndip/ndip%s'%i
#     sdip ='sdip/sdip%s'%i
#     pq   ='pq/pq%s'%i
#     sdip2='sdip2/sdip2_%s'%i
#     ndip2='ndip2/ndip2_%s'%i
#     signoi ='signoi/signoi%s'%i
#     noiz2 ='noiz2/noiz2_%s'%i
#     sign2 ='sign2/sign2_%s'%i
#     lowf ='lowf/lowf%s'%i
#     sign3 ='sign3/sign3_%s'%i
#     noiz3 ='noiz3/noiz3_%s'%i
#     PShot ='Fig/PShot_%s'%i
#     Psign ='Fig/Psign_%s'%i
#     Pnoiz ='Fig/Pnoiz_%s'%i
#     Compare ='Fig/Compare_%s'%i
#     Shot_Mask_bin = 'Shot_mask/Shot_Mask_bin_%s'%i
#     Offsets = 'Offsets/Offsets_%s'%i
#     Headers = 'Headers/Headers_%s'%i
#     Statics = 'Statics/Statics_%s'%i
#     Flow(Shot_Mask_bin, 'Utils/Cube_mask', 'window f3=%d n3=1'%i)
#     MaskedShots.append(Shot_Mask_bin)
#     All.append(sign3)
#     if i in DeadShots:
#         Flow(Shot,'RSF/Cube.rsf','window n1=6250 f3=%d n3=1 | headercut mask="Utils/Shot_Mask.rsf"'%i)
#         Flow(sign3, Shot, 'cp')
#     else:
#         Flow(Shot,'RSF/Cube.rsf', 'window n1=6250 f3=%d n3=1'%i)
#         Vo = 1000
#         padding = 1500
#         nj = (3,2)
#         Flow(tilted, Shot       , 'pad beg1=%d | stretch rule=l v0=%d half=n delay=0 verb=y'%(padding, Vo))
#         Flow(noiz  ,tilted      ,'bandpass fhi=10 | mutter v0=%d half=n'%(Vo*2))
#         Flow(sign  ,tilted      ,'bandpass flo=10')
#         Flow(mask  ,noiz        , 'math output="abs(input)" | mask min=0.02 | dd type=float')
#         Flow(dat2  , [tilted,mask],'add mode=p ${SOURCES[1]}')
#         Flow(ndip  ,noiz       ,'twodip2 order=3 nj1=%d nj2=%d eps=8 verb=n gauss=n p0=2 q0=-2'%(nj[0],nj[0]))
#         Flow(sdip  ,sign, twodip2(nj[1],nj[1],'p0=-2 q0=2'))
#         Flow(pq    ,[dat2, sdip,ndip,mask],twodip2(nj[1],nj[0],'dip1=${SOURCES[1]} dip2=${SOURCES[2]} mask=${SOURCES[3]}'))
#         Flow(sdip2 ,pq, 'window n3=1')
#         Flow(ndip2 ,pq,'window f3=1')
#         Flow(signoi,[dat2,sdip2,ndip2],'''
#              planesignoi sdip=${SOURCES[2]} ndip=${SOURCES[1]}
#              order=3 nj1=%d nj2=%d eps=2 verb=n niter=100'''%nj)
#         #back rotate
#         Flow(noiz2, signoi,'window n3=1 | lmostretch inv=y v0=%d half=n delay=0 | window f1=%d'%(Vo,padding))
#         Flow(sign2,[signoi, mask, tilted, dat2],'''
#              window f3=1 |
#              add mode=p ${SOURCES[1]} | add scale=1,1,-1 ${SOURCES[2:4]} |
#              lmostretch inv=y v0=%d half=n delay=0 | window f1=%d'''%(Vo, padding))
#         Flow(lowf, sign2, 'bandpass fhi=8')
#         Flow(Headers, 'RSF/TIB01_T', 'window f2=120*%s n2=120'%i)
#         Flow(Offsets, Headers, 'headermath output="offset" | window')
#         Flow(Statics, Headers,'headermath output="((-1*(%s-selev)/scalel)+(gelev-selev)/scalel)/%s"' %(MaxAlt,Vo))
#         Flow(sign3,[sign2,lowf,Statics, Offsets],'add scale=1,-1 ${SOURCES[1]} | stretch rule=d datum=${SOURCES[2]} | mutter offset=${SOURCES[3]} V0=2000 | despike2 wide1=3 wide2=5')
#         Flow(noiz3,[noiz2,lowf],'add ${SOURCES[1]}')

        #Plot(PShot, Shot, 'window max1=10 | grey title=%s gpow=1'%Shot)
        #Plot(Psign, sign3, 'window max1=10 | grey title=%s_signal gpow=1'%Shot)
        #Plot(Pnoiz,noiz3, 'window max1=10 | grey title=%s_noise gpow=1'%Shot)
#         #Result(Compare, [PShot, Psign, Pnoiz],'SideBySideAniso')
# Flow('Utils/Maskheader', MaskedShots, 'rcat ${SOURCES[1:-1]} axis=1')
# Flow('RSF/Filt_line', All, 'rcat ${SOURCES[1:-1]} axis=2')
# Masked_Line = 'RSF/Masked_line'
# Flow(Masked_Line, ['RSF/Filt_line', 'Utils/Maskheader'], 'headerwindow mask=${SOURCES[1]}')
# # Flow('RSF/CDPs',Masked_Line, 'sfintbin axis=n2 xk=cdpx yk=cdpy mask="Utils/CDPs_mask.rsf" map="Utils/CDPs_map.rsf"')
# Flow('New_Head', 'New_Head.dat', 'csv2rsf delimiter="," dtype=int| transp')

#############Import interpolated time-slices ##########################
#######################################################################
# CdPl = []
# for i in range(6250):
#     CdP_Slice = 'CdP_Slices/CdP_Slice_%s'%i
#     CdPl.append(CdP_Slice)
#     #Flow(CdP_Slice, None, 'rm')
# Cats=[]
# for i in range(6250)[::250]:
#     Cat= 'CdP_Slices/cat%s'%i
#     Cats.append(Cat)
    # Flow(Cat, CdPl[i:i+250], 'rcat ${SOURCES[1:-1]} axis=3')
#Flow('RSF/CdP3', Cats, 'rcat ${SOURCES[1:-1]} axis=3 ')

###################Import Offsets with bin stack ##########################
#######################################################################
# Filts =[]
# for C in range(94):
#     # Flow('MO_filt/MoFilt%s'%C,'MO_filt/MO_Grid_%s.dat'%C,  'sfcsv2rsf | put d1=0.004 label1="Time", unit1="s" d2=100 label2="shot" unit2="m"')
#     Filts.append('MO_filt/MoFilt%s'%C)
# Flow('MO_filt/MoFilt_Cube',Filts, 'rcat ${SOURCES[1:-1]} axis=3')
# Flow('MO_filt/MoFilt_Cube_T', 'MO_filt/MoFilt_Cube', 'sftransp | sftransp plane=23 memsize=50000 | put d1=0.004 o1=0 label1="Time", unit1="s" d2=50 label2="Offset" unit="m" o3=%s d3=100 label3="shot" unit3="m"'%Low_bound)

###################Import regularized CdPs  ##########################
#######################################################################
# for C in range(870):
#     Flow('CDP_R_W8ted/CdP4_%s'%C, 'CDP_R_W8ted/New_CDP_%s.dat'%C, 'sfcsv2rsf | sftransp | put d1=0.004 label1="Time", unit1="s" d2=50 label2="shot" unit2="m"| window f2=4 n2=70')

# Flow('RSF/CdP3t', 'RSF/CdP3', 'transp plane=23 | transp plane 13 | put d1=0.004 label1="Time" unit1="s" d2=25 label2="Offset" unit2="m" d3=25 label3="CdP" unit3="m" o3=%s'%Low_bound)
# Flow('RSF/CdP2',[Masked_Line, 'New_Head'], 'sfintbin axis=n2 head=${SOURCES[1]} xkey=1 ykey=2 mask="Utils/CDP2_mask.rsf" map="Utils/CDP2_map.rsf"| sfput d3=25 d2=25 label3="CDP" label2="Offset" unit2="m" unit3="m"')
#Flow('RSF/Brute_Stack', 'RSF/CdP3t', 'stack axis=2')

####################### Process CdP #####################################
##### http://www.ahay.org/RSF/book/tccs/nmodeblend/paper_html/paper.html
### The scan could be done as a cube, better?
#########################################################################
V1= 1500.
V2= 10000.
Low_bound, High_bound = 84, 954
Dead_CMP=[101,678,69]
CdPs, NMO, pNMO, Vel_Picks, P_Vels, CdPs3, Sembs, Dmos, VI = [], [], [], [], [], [], [], [], []
for i in range(High_bound-Low_bound):
    cdp0 = 'CDP/cdp_%s'%i
    cdp1 = 'CDP/cdp_1_%s'%i
    cdp2 = 'CDP/cdp_2_%s'%i
    cdp3 = 'CDP/cdp_3_%s'%i
    cdp_mask = 'CDP_Mask/cdp_Mask_%s'%i
    Compare_Filt ='Compare/filt_%s'%i
    Sembl0 = 'Sembl/Sembl_%s'%i
    Sembl1 = 'Sembl/Sembl_1_%s'%i
    Sembl2 = 'Sembl/Sembl_2_%s'%i
    vpick0 = 'Vpick/Vpick_%s'%i
    vpick1 = 'Vpick/Vpick_1_%s'%i
    vpick2 = 'Vpick/Vpick_2_%s'%i
    vint= 'Vint/Vint_%s'%i
    nmo0 = 'Nmo/Nmo_%s'%i
    nmo1 = 'Nmo/Nmo_1_%s'%i
    nmo2 = 'Nmo/Nmo_2_%s'%i
    dmo2 = 'DMO/Dmo_2_%s'%i
    # vdip0 = 'Vdip/Vdip_%s'%i
    # vdip1 = 'Vdip/Vdip_1_%s'%i
    # vdip2 = 'Vdip/Vdip_2_%s'%i
    # vseis = 'Vseis/Vseis_%s'%i
    # Freq= 'Freq/Freq%s'%i
    # Fmask = 'FMask/FMask_%s'%i
    # Fmask2='FMask2/FMask2_%s'%i
    # CdP2 = 'Cdp2/Cdp2_%s'%i
    # Exp = 'Exp/Exp_%s_'%i
    # CdP_Ndip = 'CdP_Ndip/CdP_Ndip_%s'%i
    # CdP_Sdip = 'CdP_Sdip/CdP_Sdip_%s'%i
    # Cl_cdp = 'Cl_cdp/Cl_cdp_%s'%i
    # Dip0 = 'Dip0/Dip0_%s'%i
    # Dip1 = 'Dip1/Dip1_%s'%i
    # Dip2 = 'Dip2/Dip2_%s'%i
    # Dip3 = 'Dip3/Dip3_%s'%i
    # Dip05= 'Dip05/Dip05_%s'%i
    # Vtr = 'Vtr/Vtr_%s'%i
    # Vtk = 'Vtk/Vtk_%s'%i
    # Pnmo = 'Pnmo/Pnmo_%s'%i
    # PVel = 'PVel/PVel_%s'%i
    # Pplot = 'Pplot/Pplot_%s'%i
    # Dips0 = 'Dips0/Dips0_%s'%i
    # Dips = 'Dips/Dips_%s'%i
    # xdip = 'Xdip/Xdip_%s'%i
    # hdip = 'Hdip/hdip_%s'%i
    # mig = 'MigS/MigS_%s'%i
    NMO.append(nmo2)
    CdPs3.append(cdp3)
    # pNMO.append(Pnmo)
    Vel_Picks.append(vpick2)
    Sembs.append(Sembl2)
    Dmos.append(dmo2)
    VI.append(vint)
    Flow(cdp0, 'CDP_R_W8ted/CdP4_%s'%(i), 'bandpass flo=10 | pow pow1=2')
    Flow(Sembl0, cdp0, 'vscan semblance=y v0=%d dv=20 nv=400 half=y'%V1)
    Flow(vpick0, Sembl0, 'envelope | scale axis=2 | pick rect1=40 | remap1 pattern=$SOURCE order=2 | window')
    Flow(nmo0, [cdp0, vpick0],'nmo velocity=${SOURCES[1]} half=y | despike2 wide1=3 wide2=5')
    Flow(cdp1, [nmo0, vpick0], 'inmo velocity=${SOURCES[1]} half=y')
    Flow(Sembl1, cdp1, 'vscan semblance=y v0=%d dv=20 nv=400 half=y'%V1)
    Flow(vpick1, Sembl1, 'envelope | scale axis=2 | pick rect1=40 | remap1 pattern=$SOURCE order=2 | window')
    Flow(nmo1, [cdp1, vpick1],'nmo velocity=${SOURCES[1]} half=y | despike2 wide1=3 wide2=3')
    Flow(cdp2, [nmo1, vpick1], 'inmo velocity=${SOURCES[1]} half=y')
    Flow(Sembl2, cdp2, 'vscan semblance=y str=0.01 v0=%d dv=20 nv=400 half=y'%V1)
    Flow(vpick2, Sembl2, 'envelope | scale axis=2 | pick rect1=40 | remap1 pattern=$SOURCE order=2 | sfsmooth rect1=200 repeat=5| window')
    Flow(vint, vpick2, 'smooth rect1=200 repeat=5 |dix rect1=100')
    Flow(nmo2, [cdp2, vpick2],'nmo velocity=${SOURCES[1]} half=y | despike2 wide1=3 wide2=3')
#    Flow(dmo2, nmo2, 'transp plane=23 | dmo velhalf=3500 half=y | transp plane=23 | sfdespike2 wide1=3 wide2=3')
    Flow(cdp3, [nmo2, vpick2], 'inmo velocity=${SOURCES[1]} half=y')
    # Plot(nmo, nmo, 'sfgrey color=i scalebar=y title="standard nmo"')
    # Flow(Dip0,cdp,dip(1./V1-1./V2))
    # Flow(Dip1,cdp,dip(1./V2))
    # Flow(Dip2,[cdp, Dip0, Dip1],'nmostretch half=y v0=%s | twodip2 dip1=${SOURCES[1]} q0=0 order=3 niter=10 eps=200 lam=40 | window n3=1 | math ref=${SOURCES[2]} output="input+ref" '%V1)
    # Flow(Dip3, [cdp,Dip2], 'dip idip=${SOURCES[1]} order=3 niter=10 liter=100 rect=50 rect2=20 pmin=0')
    # Flow([Pnmo,PVel], [cdp, Dip3], 'pnmo dip=${SOURCES[1]} vel=${TARGETS[1]}')
    # Plot(Pnmo, Pnmo, 'sfgrey color=i scalebar=y title="slope nmo"')
    # Plot(PVel, PVel, 'graph title="slope velocity" transp=y')
    # Result(Pplot,[Pnmo, nmo], 'SideBySideAniso')
    # Flow(Dip05,Dip3,'window min2=500 | despike2 wide1=7 wide2=7')
    # Flow(Vtr,[cdp, Dip05],'window min2=500 | pveltran v0=%d dv=10 nv=800 dip=${SOURCES[1]}'%V1)
    # Flow(Vtk,Vtr, 'envelope | scale axis=2 | pick rect1=20 |  window min1=1.2 | remap1 pattern=$SOURCE order=2')
    #Flow(Dips0, Dip3, 'spray axis=3 n=250 d=0.0335 o=7.705')
    #Flow(Dips, [cdp, Dips0], 'dip idip=${SOURCES[1]} rect1=25 rect2=10 rect3=25')
    #Flow(hdip, Dips, 'window n4=1')
    #Flow(xdip, Dips, 'window f4=1')
    #Flow(mig, [cdp, hdip, xdip], 'pmig hdip=${SOURCES[1]} xdip=${SOURCES[2]}' )
Flow('RSF/NMO', NMO, 'rcat ${SOURCES[1:-1]} axis=3')
# Flow('RSF/pNMO', pNMO, 'rcat ${SOURCES[1:-1]} axis=3')
Flow('RSF/Vel_Picks', Vel_Picks, 'rcat ${SOURCES[1:-1]} axis=2')
# Flow('RSF/Filt_NMO', NMO_Sp, 'rcat ${SOURCES[1:-1]} axis=2')
Flow('RSF/NMO_Stack','RSF/NMO', 'stack axis=2' )
Flow('RSF/Semblances', Sembs, 'rcat ${SOURCES[1:-1]} axis=3')
Flow('RSF/DMO', Dmos, 'rcat ${SOURCES[1:-1]} axis=3')
Flow('RSF/DMO_Stack','RSF/DMO', 'stack axis=2' )
# Flow('RSF/pNMO_Stack','RSF/pNMO', 'stack axis=2' )
### NaN in the Velocity
Flow('RSF/Vel_Picks_Stack','RSF/Vel_Picks', 'clip2 lower=2000 upper=8000 |stack axis=2' )
Result('Stack/NMO_Stack', 'RSF/NMO_Stack', 'agc rect=20 | grey color=seismic scalebar=y maxval=8 minval=-8 title="nmo Brute Stack", vppen=')
Flow('Fig/Compare/NMO_Stackp', 'RSF/NMO_Stack', 'prep4plot inp=${SOURCE} out={TARGET} ppi=300')
# Result('Stack/Filt_NMO_Stack', 'RSF/Filt_NMO_Stack', 'agc rect=20 | grey color=seismic scalebar=y maxval=8 minval=-8 title="Filtered_nmo Brute Stack" ppi=300')
# Result('Stack/pNMO_Stack', 'RSF/pNMO_Stack', 'despike2 wide1=2 wide2=3 | agc rect1=6000 rect2=50 | grey pclip=95 color=seismic scalebar=y maxval=8 minval=-8 title="slope nmo Brute Stack" ppi=300')
Plot('RSF/Vel_Picks_Stack','RSF/Vel_Picks_Stack', 'window n2=1 | graph title="velocity function" transp=y')
Result('RSF/Vel_Picks', 'RSF/Vel_Picks', 'clip2 lower=2000 upper=8000 | despike wide1=100 wide2=50 | sfagc rect1=6500 rect2=200 | put d2=100 label2="CdP" unit2="m"  | grey color=x scalebar=y polarity=y title="NMO Velocity picks"')
Result('Stack/Vel_Picks_Stack', ['RSF/Vel_Picks_Stack','RSF/Vel_Picks'], 'SideBySideAniso' )

###### Common-offset domain prestack kirchhoff time migration (PSTM)######
############################################################################
# velcon('RSF/CdPs3a',
#        nv=120,      # continuation steps
#        v0=1500,     # initial velocity
#        dv=25,       # velocity step
#        nx=870,     # lateral dimension
#        nh=70,      # number of offsets
#        padt=1024,   # time padding
#        padt2=4096,  # extra time padding
#        padx=1025,   # lateral padding
#        dx=100,  # lateral sampling
#        v1=3500,     # other velocity
#        vx0=2000,    # semblance muting
#        vslope=1200, # semblance muting
#        units='m',   # lateral units
#        rect1=70,
#        rect2=70)
Flow('RSF/Pick_Semblance', ['RSF/Semblances','RSF/Vel_Picks'], 'slice pick=${SOURCES[1]}')
# Flow('RSF/IntVel',['RSF/Vel_Picks','RSF/Pick_Semblance' ], 'dix weight=${SOURCES[1]} rect1=100 rect2=100')
Flow('RSF/IntVel', VI, 'rcat ${SOURCES[1:-1]} axis=3')
Flow('RSF/CdPs3', CdPs3, 'rcat ${SOURCES[1:-1]} axis=3')
Flow('RSF/CdPs3a','RSF/CdPs3', 'put label2="CdP" d3=25 o3=%s label3="Offset" unit3=m'%Low_bound )
Flow('RSF/CdPs3T','RSF/CdPs3a', 'transp memsize=20000 plane=23')
#Flow('RSF/PSTM', ['RSF/CdPs3T','RSF/Vel_Picks'], 'mig2 vel=${SOURCES[1]} apt=50 antialias=5')
# Flow('RSF/PSTM_D', ['RSF/PSTM', 'RSF/IntVel'], 'time2depth velocity=${SOURCES[1]} intime=y nz=2000 dz=25')



#########TODO#####
 ###statics###
#Vo=in header
# Compare spectra
# <RSF/PSTM.rsf sfspectra all=y | sfscale axis=1 | sfdots | sfpen
# <RSF/TIB01.rsf sfspectra all=y | sfscale axis=1 | sfdots | sfpen
# Plot('spectra',['specTIB1','specPSTM'], 'cat axis=2 ${SOURCES[1]} | dots labels="recon:model" label1=Frequency dots=0 labelsz=10 titlesz=12')
#Velocity continuation
# <RSF/PSTM.rsf sfpad beg2=100 end2=100 | sfvelcon vel=1.5 adj=n | sfwindow f2=100 n2=870



End()
