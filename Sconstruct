#!/usr/bin/csh
from rsf.proj import *
import os, sys
import numpy as np
os.environ['SFPENOPTS'] = 'bgcolor=w'
# from rsf.recipes.velcon import velcon
from Methods import Regularize, Prepare
import rsf.recipes.stack as stack

def twodip2(nj1,nj2,extra):
    return '''twodip2 order=3 nj1=%d nj2=%d eps=8 verb=n gauss=n''' % (nj1,nj2) + extra

def grey(title):
    return '''
    grey crowd1=0.8 label1="Time (s)" label2="Offset (km)"
    title="%s"
    ''' % title
def dip(slow2):
    return '''math output="(%g*x2/x1)" | mutter half=n v0=1400 tp=0.4''' % (slow2*d2/d1)

#########################Parameters ##################################
d1=0.004
d2=50
n1=12500
n2=120
CdP_Bin=100
Dir ='/media/julien/NuDrive/Himalayas/dummy/SGY/INDEPTH'
Vo= 1794
MaxAlt = 4884699
CoX, CoY = 15700000, 3000000  #Coordinate modifier
EPSG_in  = 2329
EPSG_Survey = 2375
print 'Py_Multithreadable?',__name__ == "__main__", ', we will try anyway!'
NSF = False
LineName='RSF/TIB01'

######################## File management ####################

# #### Static corrections
# Flow('Utils/Tr_Velocity', 'RSF/Tr_Velocity.dat', 'sfcsv2rsf | transp | dd type=int')

######################## DATA LOADING ################################
########################################################################
SGYs =['RSF/TIB01_56-175', 'RSF/TIB01_176-275', 'RSF/TIB01_276-375', 'RSF/TIB01_376-475', 'RSF/TIB01_476-581']
# for sgy in SGYs:
#     Flow([sgy, sgy+'_T',sgy+'_H', sgy+'_B'], sgy+'.sgy','segyread tape="$SOURCE" tfile=${TARGETS[1]} hfile=${TARGETS[2]} bfile=${TARGETS[3]}',stdin=0)
# Flow(LineName, SGYs, 'rcat ${SOURCES[1:-1]} axis=2')
# Flow(LineName+'_T',[SGYs[i]+'_T' for i in range(len(SGYs))], 'rcat ${SOURCES[1:-1]} axis=2')



######## Remove Ground Roll in shot receiver space by rotating ########
############  then dip-filter the low velocity component ##############
########  and trashing the low frequency, back rotating after #########
############# Plane-wave destruction method from Fomel ################
DeadShots =[0, 3, 4, 24, 25, 37, 38, 47, 48,  52, 53, 74,75, 87,  106, 108,  111, 112, 120, 121,  137, 153,154,  171, 186,  202, 203, 220,  235, 238,    297, 298,   309, 310, 316, 317, 318,   335, 336,  349, 350, 355,   374, 375, 396, 397,  419, 420, 431, 432]
Slip={}
Slip[214] =-2
All, Heads = [], []
m=0
for i in range(447):
    w=0
    if i in Slip:
        m +=Slip[i]
        w = Slip[i]
    if i ==446:
        w= -13
    Shot ='Shots/Shot_'+str(i)
    Trace ='Trace/Trace_'+str(i)
    tilted ='tilted/tilted%s'%i
    noiz ='noiz/noiz%s'%i
    sign ='sign/sign%s'%i
    mask ='mask/mask%s'%i
    dat2 ='dat2/dat2_%s'%i
    ndip ='ndip/ndip%s'%i
    sdip ='sdip/sdip%s'%i
    pq   ='pq/pq%s'%i
    sdip2='sdip2/sdip2_%s'%i
    ndip2='ndip2/ndip2_%s'%i
    signoi ='signoi/signoi%s'%i
    noiz2 ='noiz2/noiz2_%s'%i
    sign2 ='sign2/sign2_%s'%i
    lowf ='lowf/lowf%s'%i
    sign3 ='sign3/sign3_%s'%i
    header ='Headers/header_%s'%i
    statics ='Headers/Static_%s'%i
#     noiz3 ='noiz3/noiz3_%s'%i
    PShot ='Fig/PShot_%s'%i
    DShot ='Fig/DShot_%s'%i
#     Psign ='Fig/Psign_%s'%i
#     Pnoiz ='Fig/Pnoiz_%s'%i
#     Compare ='Fig/Compare_%s'%i
    Offsets = 'Offsets/Offsets_%s'%i
    if i not in DeadShots:
        All.append(sign3)
        Heads.append(header)
        # Flow(header, LineName+'_T', 'window f2=%d n2=%d'%(i*120+m, 120+w))
        # Flow(statics, header, 'headermath output="2*(gelev-%s)/(scalel*%s)" '%(MaxAlt, Vo))
        # Flow(Shot,LineName, 'window n1=%s f2=%d n2=%d | put o2=0 d2=%s'%(n1, i*120+m, 120+w, d2))
        # Vo = 1000
        # padding = 1500
        # nj = (3,2)
        # Flow(tilted, Shot       , 'pad beg1=%d | stretch rule=l v0=%d half=n delay=0 verb=y'%(padding, Vo))
        # Flow(noiz  ,tilted      ,'bandpass fhi=10 | mutter v0=%d half=n'%(Vo*2))
        # Flow(sign  ,tilted      ,'bandpass flo=10')
        # Flow(mask  ,noiz        , 'math output="abs(input)" | mask min=0.02 | dd type=float')
        # Flow(dat2  , [tilted,mask],'add mode=p ${SOURCES[1]}')
        # Flow(ndip  ,noiz       ,'twodip2 order=3 nj1=%d nj2=%d eps=8 verb=n gauss=n p0=2 q0=-2'%(nj[0],nj[0]))
        # Flow(sdip  ,sign, twodip2(nj[1],nj[1],'p0=-2 q0=2'))
        # Flow(pq    ,[dat2, sdip,ndip,mask],twodip2(nj[1],nj[0],'dip1=${SOURCES[1]} dip2=${SOURCES[2]} mask=${SOURCES[3]}'))
        # Flow(sdip2 ,pq, 'window n3=1')
        # Flow(ndip2 ,pq,'window f3=1')
        # Flow(signoi,[dat2,sdip2,ndip2],'''
        #      planesignoi sdip=${SOURCES[2]} ndip=${SOURCES[1]}
        #      order=3 nj1=%d nj2=%d eps=2 verb=n niter=100'''%nj)
        # #back rotate
        # Flow(noiz2, signoi,'window n3=1 | lmostretch inv=y v0=%d half=n delay=0 | window f1=%d'%(Vo,padding))
        # Flow(sign2,[signoi, mask, tilted, dat2],'''
        #      window f3=1 |
        #      add mode=p ${SOURCES[1]} | add scale=1,1,-1 ${SOURCES[2:4]} |
        #      lmostretch inv=y v0=%d half=n delay=0 | window f1=%d'''%(Vo, padding))
        # Flow(lowf, sign2, 'bandpass fhi=8')
        # Flow(Offsets, header, 'headermath output="offset" | window')
        # Flow(sign3,[sign2,lowf,Offsets, statics],'add scale=1,-1 ${SOURCES[1]} |  stretch rule=d datum=${SOURCES[3]} | mutter offset=${SOURCES[2]} V0=1500 | despike2 wide1=3 wide2=3')
        # Flow(noiz3,[noiz2,lowf],'add ${SOURCES[1]}')
        # Plot(PShot, Shot, 'window max1=10 | grey title=%s gpow=2'%Shot)
#         Plot(Psign, sign3, 'window max1=10 | grey title=%s_signal gpow=1'%Shot)
#         Plot(Pnoiz,noiz3, 'window max1=10 | grey title=%s_noise gpow=1'%Shot)
#         Result(Compare, [PShot, Psign, Pnoiz],'SideBySideAniso')
    # if i in DeadShots:
    #     Plot(DShot, LineName, 'window n1=%s f2=%d n2=%d  | put o2=0 d2=%s | grey title=%s gpow=2'%(n1, i*120+m, 120+w, d2,DShot))

Filt_Line ='RSF/Filt_line'
# Flow(Filt_Line, All, 'rcat ${SOURCES[1:-1]} axis=2')
# Flow(Filt_Line+'_H', Heads, 'rcat ${SOURCES[1:-1]} axis=2')


# Prepare.Load(Dir, Filt_Line+'_H.rsf' , CoX, CoY, CdP_Bin, d2, NSF, EPSG_in, EPSG_Survey)

###############Interpolate Missing Data and regularize ##################
##########################################################
# Regularize.Cubize(Dir, Filt_Line+'.rsf', n1)

Params= np.genfromtxt(Dir+os.sep+'Utils/Parameters.txt', usecols=1, dtype=np.int)
MinOff, MaxOff, Low_bound, High_bound = Params



################Import regularized CdPs  ##########################
#####################################################################
Near= 1
Far = 62
N2  = Far-Near
N3 = High_bound-Low_bound #len(yi)
V1= 1500.
V2= 9500.
Aperture = N3 #len(yi)
Pick_R1, Pick_R2, Pick_R3 = 40, 10, 10
nout =2048
f1=50
dx=1
CdPw8 = []
for C in range(N3):
    cdp= 'CDP_R_W8ted/CdP4_%s'%C
    CdPw8.append(cdp)
    # Flow(cdp, 'CDP_R_W8ted/New_CDP_%s.dat'%C, 'sfcsv2rsf | put d1=%s label1="Time", unit1="s" d2=%s label2="Offset" unit2="m"| window f2=%s n2=%s | bandpass flo=10 | pow pow1=2'%(d1,d2, Near, N2))

##################### Process CdP #####################################
### http://www.ahay.org/RSF/book/tccs/nmodeblend/paper_html/paper.html
#######################################################################
Flow('RSF/CdP_0',CdPw8 , 'rcat ${SOURCES[1:-1]} axis=3')
Flow('RSF/Sembl_0', 'RSF/CdP_0', 'vscan semblance=y v0='+str(V1)+' dv=20 nv=350 half=y extend=12', split=[3,N3],reduce='cat')
Flow('RSF/Pick_0','RSF/Sembl_0','envelope | scale axis=2 | sfpick vel0=%s rect1=%s rect2=%s rect3=%s'%(V1, Pick_R1, Pick_R2, Pick_R3))
Flow('RSF/NMO_0', ['RSF/CdP_0', 'RSF/Pick_0'], 'nmo velocity=${SOURCES[1]} half=y | despike2 wide1=3 wide2=3 wide3=5')
Flow('RSF/CdP_1', ['RSF/NMO_0', 'RSF/Pick_0'], 'inmo velocity=${SOURCES[1]} half=y')
Flow('RSF/Sembl_1', 'RSF/CdP_1', 'vscan semblance=y v0='+str(V1)+' dv=20 nv=350 half=y extend=12', split=[3,N3],reduce='cat')
Flow('RSF/Pick_1','RSF/Sembl_1','envelope | scale axis=2 | sfpick vel0=%s rect1=%s rect2=%s rect3=%s'%(V1, Pick_R1, Pick_R2, Pick_R3))
Flow('RSF/NMO_1', ['RSF/CdP_1', 'RSF/Pick_1'], 'nmo velocity=${SOURCES[1]} half=y | despike2 wide1=3 wide2=3 wide3=5')
Flow('RSF/CdP_2', ['RSF/NMO_1', 'RSF/Pick_1'], 'inmo velocity=${SOURCES[1]} half=y')
Flow('RSF/Sembl_2', 'RSF/CdP_2', 'vscan semblance=y v0='+str(V1)+' dv=20 nv=350 half=y extend=12', split=[3,N3],reduce='cat')
Flow('RSF/Pick_2','RSF/Sembl_2','envelope | scale axis=2 | sfpick vel0=%s rect1=%s rect2=%s rect3=%s'%(V1, Pick_R1, Pick_R2, Pick_R3))
Flow('RSF/NMO_2', ['RSF/CdP_2', 'RSF/Pick_2'], 'nmo velocity=${SOURCES[1]} half=y | despike2 wide1=3 wide2=3 wide3=5')
Flow('RSF/CdP_3', ['RSF/NMO_2', 'RSF/Pick_2'], 'inmo velocity=${SOURCES[1]} half=y')
Flow('RSF/NMO_Stack','RSF/NMO_2', 'stack axis=2' )
# ############################################# DMO Stack #####################################################
#
# ############## Spectral balancing ##############
# ################################################
# # def psrect(rect):
# #     return ''' math min=${SOURCES[1]} max=${SOURCES[1]}
# #     output="sqrt(1+%d*(1/min^2-1/max^2)*input)" ''' % rect
# #
# # rect1 = 50   # vertical smoothing
# # rect2 = 20   # in-line smoothing
# # rect3 = 20   # cross-line smoothing
# # nx    = 468        # number of traces
# # o2    = 0       # in-line start
# # o3    = 0       # cross-line start
# # ny    = N2       # number of lines
# # frect = 10   # frequency smoothing
# #
# # ifreq = ''' iphase rect1=%d rect2=%d rect3=%d order=100 complex=y | transp memsize=5000 |
# #     spline n1=%d d1=1 o1=%g | transp memsize=5000  |  transp plane=13 memsize=5000 |
# #     spline n1=%d d1=1 o1=%g | transp plane=13 memsize=5000
# #     ''' % (2*rect1,2*rect2,2*rect3,nx,o2,ny,o3)
# # balance = '''nsmooth1 rect=${SOURCES[1]} | abalance rect1=%d rect2=%d rect3=%d order=100 '''
# # getmask = 'add scale=1,-1 ${SOURCES[1]} | mask min=0 | dd type=float'
# #
# # inf='RSF/NMO_Stack_1'
# # si= inf+'_iFreq'
# # sr= inf+'_rect'
# # Flow(si,inf,ifreq)
# # Flow(sr+'0',si, psrect(frect))
# # Flow(sr,[inf,sr+'0'],balance)
# # Flow('RSF/DMO_Stack_1', inf, 'window f1=%d | logstretch nout=%d | fft1 | transp plane=13 memsize=16000 | finstack | transp memsize=16000 |  fft1 inv=y | window n1=%d | logstretch inv=y | pad beg1=%d | transp | bandpass fhi=%g | transp' % (f1,nout,nout,f1,0.75*0.5/dx))


############## AGC for avoinding bursts not sure it is a good idea...################
Flow('RSF/CdP_3a','RSF/CdP_3', 'sfagc rect1=%s rect2=5 rect3=20 | put label2="Offset" d3=%s o3=%s label3="Offset" unit3=m'%(n1, CdP_Bin, Low_bound*CdP_Bin) )
Flow('RSF/CdP_3T','RSF/CdP_3a', 'transp memsize=20000 plane=23')
Flow('RSF/PSTM' , ['RSF/CdP_3T','RSF/Pick_2'], 'mig2 vel=${SOURCES[1]} apt='+str(Aperture)+'antialias=7', split=[3,N2,[0]],reduce='add')
###################################### Time To Depth Conversion ###################################################
Flow('RSF/Pick_Sembl_2', ['RSF/Sembl_2','RSF/Pick_2'], 'slice pick=${SOURCES[1]}')
Flow('RSF/IntVel',['RSF/Pick_2','RSF/Pick_Sembl_2' ], 'dix weight=${SOURCES[1]} rect1=100 rect2=100 | clip2 lower=%s | put label2=CdP unit2=m d2=100'%V1)
Flow('RSF/PSTM_D', ['RSF/PSTM', 'RSF/IntVel'], 'time2depth velocity=${SOURCES[1]} intime=y nz=10000 dz=10 | put label1=depth unit1=m')

######################################## slope-driven migration ###################################################
##############################################################################################################
# Flow('Slope/Dip0','RSF/CdP_0',dip(1./V1-1./V2))
# Flow('Slope/Dip1','RSF/CdP_0',dip(1./V2))
# Flow('Slope/Dip2',['RSF/CdP_0', 'Slope/Dip0', 'Slope/Dip1'],'nmostretch half=y v0=%s | twodip2 dip1=${SOURCES[1]} q0=0 order=3 niter=10 eps=200 lam=40 | window n3=1 | math ref=${SOURCES[2]} output="input+ref" '%V1, split=[3,N3],reduce='cat')
# Flow('Slope/Dip3', ['RSF/CdP_0', 'Slope/Dip2'], 'dip idip=${SOURCES[1]} order=3 niter=10 liter=100 rect=50 rect2=20 pmin=0', split=[3,N3],reduce='cat')
# Flow(['Slope/Pnmo','Slope/PVel'], ['RSF/CdP_0', 'Slope/Dip2'], 'pnmo dip=${SOURCES[1]} vel=${TARGETS[1]}')
# # # #     # Plot(Pnmo, Pnmo, 'sfgrey color=i scalebar=y title="slope nmo"')
# # # #     # Plot(PVel, PVel, 'graph title="slope velocity" transp=y')
# # # #     # Result(Pplot,[Pnmo, nmo], 'SideBySideAniso')
# Flow('Slope/Dip05','Slope/Dip3','window min2=500 | despike2 wide1=7 wide2=7', split=[3,N3],reduce='cat')
# Flow('Slope/Vtr',['RSF/CdP_0', 'Slope/Dip05'],'window min2=500 | pveltran v0=%d dv=10 nv=800 dip=${SOURCES[1]}'%V1, split=[3,N3],reduce='cat')
# Flow('Slope/Vtk','Slope/Vtr', 'envelope | scale axis=2 | pick rect1=20 |  window min1=1.2 | remap1 pattern=$SOURCE order=2', split=[3,N3],reduce='cat')
# Flow('Slope/Dips0', 'Slope/Dip3', 'spray axis=3 n=250 d=0.0335 o=7.705', split=[3,N3],reduce='cat')
# Flow('Slope/Dips', ['RSF/CdP_0', 'Slope/Dips0'], 'dip idip=${SOURCES[1]} rect1=25 rect2=10 rect3=25', split=[3,N3],reduce='cat')
# Flow('Slope/hdip', 'Slope/Dips', 'window n4=1', split=[3,N3],reduce='cat')
# Flow('Slope/xdip', 'Slope/Dips', 'window f4=1', split=[3,N3],reduce='cat')
# Flow('Slope/mig', ['RSF/CdP_0', 'Slope/hdip', 'Slope/xdip'], 'pmig hdip=${SOURCES[1]} xdip=${SOURCES[2]}' )





################ Generate a SEGY file
head = ['Utils/Tr','Utils/X','Utils/Y','Utils/Z']
for f in head:
    Flow(f,f+'.txt','sfcsv2rsf| dd type=int')
Flow('RSF/PSTM_Theader.rsf', ['RSF/PSTM.rsf', head[0], head[1], head[2],head[3]],' segyheader tracl=${SOURCES[1]} cdpx=${SOURCES[2]} cdpy=${SOURCES[3]} gelev=${SOURCES[4]}' )
Flow(LineName+'_PSTM.sgy', ['RSF/PSTM.rsf','RSF/PSTM_Theader.rsf'], 'sfsegywrite tfile=${SOURCES[1]} tape=${TARGET}')

#############Testing diffraction imaging #############
# stack.diffimg('RSF/PSTM.rsf',
#               'RSF/NMO_Stack',
#               v0=1500,
#               nv=175,
#               dv=40,
#               nx=468,
#               padx=1024,
#               nt=12500,
#               an=10,
#               tmin=0,
#               tmax=50,
#               rect1=10,
#               rect2=40,
#               srect1=1,
#               srect2=5,
#               frect1=40,
#               frect2=10,
#               units='m',
#               beg1=400)

# #########TODO#####
#  ###statics###
# #Vo=in header
# # Compare spectra
# # <RSF/PSTM.rsf sfspectra all=y | sfscale axis=1 | sfdots | sfpen
# # <RSF/TIB01.rsf sfspectra all=y | sfscale axis=1 | sfdots | sfpen
# # Plot('spectra',['specTIB1','specPSTM'], 'cat axis=2 ${SOURCES[1]} | dots labels="recon:model" label1=Frequency dots=0 labelsz=10 titlesz=12')
# #Velocity continuation
# # <RSF/PSTM.rsf sfpad beg2=100 end2=100 | sfvelcon vel=1.5 adj=n | sfwindow f2=100 n2=870
#
#
End()
