#!/usr/bin/csh
from rsf.proj import *
import os, sys

def twodip2(nj1,nj2,extra):
    return '''twodip2 order=3 nj1=%d nj2=%d eps=8 verb=n gauss=n''' % (nj1,nj2) + extra

def grey(title):
    return '''
    grey crowd1=0.8 label1="Time (s)" label2="Offset (km)"
    title="%s"
    ''' % title
def dip(slow2):
    return '''math output="(%g*x2/x1)" | mutter half=n v0=1400 tp=0.4''' % (slow2*d2/d1)
d1=0.004
d2=25 #CdP space
####DATA LOADING
Flow('RSF/TIB01 RSF/TIB01_T RSF/TIB01_H RSF/TIB01_B', 'TIB01.sgy','segyread tape="$SOURCE" tfile=${TARGETS[1]} hfile=${TARGETS[2]} bfile=${TARGETS[3]}',stdin=0 )
Flow('RSF/Cube', 'RSF/TIB01', 'sfintbin axis=n2 xk=tracf yk=fldr mask="Utils/Cube_mask.rsf" map="Utils/Cube_map.rsf"')
Flow('Utils/Scalel', 'RSF/TIB01_T', 'headermath output="scalel"| dd type=float | window')
Flow('Utils/Xr', 'RSF/TIB01_T', 'headermath output="gx" | dd type=float | window')
Flow('Utils/Yr', 'RSF/TIB01_T', 'headermath output="gy" | dd type=float | window')
Flow('Utils/Xr_Sc', 'Utils/Xr Utils/Scalel', 'math x=${SOURCES[1]} output=input/x')
Flow('Utils/Yr_Sc', 'Utils/Yr Utils/Scalel', 'math x=${SOURCES[1]} output=input/x')
Flow('Utils/XYr', 'Utils/Xr_Sc Utils/Yr_Sc', 'cat axis=2 ${SOURCES[1]} | window | transp')
Flow('Utils/Offsets', 'RSF/TIB01_T', 'headermath output="offset" | dd type=float | math output="abs(input)/2" | window | put label1="offset"')
Flow('Utils/fldr', 'RSF/TIB01_T', 'headermath output="fldr"| window')
Flow('Utils/OffShot', 'Utils/Offsets Utils/fldr', 'cat axis=2 ${SOURCES[1]} | window | transp ')
Flow('Utils/cdp', 'RSF/TIB01_T', 'headermath output="cdp" | dd type=float | window| put label1="cdp"')
Flow('Utils/OffCdp', 'Utils/Offsets Utils/cdp', 'cat axis=2 ${SOURCES[1]}| transp')
Flow('Utils/Shot_Mask','', 'spike n1=120 mag=0 | dd type=int')
# # ###Shot processing
# #
# # ### to do:
# # # Find out about statics
# #
# # #	 Remove Ground Roll in shot receiver space by rotating
# # #    then dip-filter the low velocity component
# # #    and trashing the low frequency, back rotating after
NaNShots = [3, 4, 14, 108, 157, 171, 254, 257, 302]
DeadShots =[0, 5, 6, 27, 28, 40, 41, 50, 51, 55, 77, 78, 90, 110, 112, 115, 116, 124, 125, 141, 158, 159, 177, 192, 208, 209, 226, 241, 244, 306, 307, 318, 319, 325, 326, 344, 345, 358, 359, 364, 383, 384, 405, 406, 428, 428, 440, 441]
All, MaskedShots = [], []
#need to map the velocities along the line
Vo= 1794
MaxAlt = 4573599
for i in range(456):
    Shot ='Shots/Shot_'+str(i)
    Trace ='Trace/Trace_'+str(i)
    tilted ='tilted/tilted%s'%i
    noiz ='noiz/noiz%s'%i
    sign ='sign/sign%s'%i
    mask ='mask/mask%s'%i
    dat2 ='dat2/dat2_%s'%i
    ndip ='ndip/ndip%s'%i
    sdip ='sdip/sdip%s'%i
    pq   ='pq/pq%s'%i
    sdip2='sdip2/sdip2_%s'%i
    ndip2='ndip2/ndip2_%s'%i
    signoi ='signoi/signoi%s'%i
    noiz2 ='noiz2/noiz2_%s'%i
    sign2 ='sign2/sign2_%s'%i
    lowf ='lowf/lowf%s'%i
    sign3 ='sign3/sign3_%s'%i
    noiz3 ='noiz3/noiz3_%s'%i
    PShot ='Fig/PShot_%s'%i
    Psign ='Fig/Psign_%s'%i
    Pnoiz ='Fig/Pnoiz_%s'%i
    Compare ='Fig/Compare_%s'%i
    Shot_Mask_bin = 'Shot_mask/Shot_Mask_bin_%s'%i
    Offsets = 'Offsets/Offsets_%s'%i
    Headers = 'Headers/Headers_%s'%i
    Statics = 'Statics/Statics_%s'%i
    Flow(Shot_Mask_bin, 'Utils/Cube_mask', 'window f3=%d n3=1'%i)
    MaskedShots.append(Shot_Mask_bin)
    All.append(sign3)
    if i in DeadShots:
        Flow(Shot,'RSF/Cube.rsf','window n1=6250 f3=%d n3=1 | headercut mask="Utils/Shot_Mask.rsf"'%i)
        Flow(sign3, Shot, 'cp')
    else:
        Flow(Shot,'RSF/Cube.rsf', 'window n1=6250 f3=%d n3=1'%i)
        Vo = 1000
        padding = 1500
        nj = (3,2)
        Flow(tilted, Shot       , 'pad beg1=%d | stretch rule=l v0=%d half=n delay=0 verb=y'%(padding, Vo))
        Flow(noiz  ,tilted      ,'bandpass fhi=10 | mutter v0=%d half=n'%(Vo*2))
        Flow(sign  ,tilted      ,'bandpass flo=10')
        Flow(mask  ,noiz        , 'math output="abs(input)" | mask min=0.02 | dd type=float')
        Flow(dat2  , [tilted,mask],'add mode=p ${SOURCES[1]}')
        Flow(ndip  ,noiz       ,'twodip2 order=3 nj1=%d nj2=%d eps=8 verb=n gauss=n p0=2 q0=-2'%(nj[0],nj[0]))
        Flow(sdip  ,sign, twodip2(nj[1],nj[1],'p0=-2 q0=2'))
        Flow(pq    ,[dat2, sdip,ndip,mask],twodip2(nj[1],nj[0],'dip1=${SOURCES[1]} dip2=${SOURCES[2]} mask=${SOURCES[3]}'))
        Flow(sdip2 ,pq, 'window n3=1')
        Flow(ndip2 ,pq,'window f3=1')
        Flow(signoi,[dat2,sdip2,ndip2],'''
             planesignoi sdip=${SOURCES[2]} ndip=${SOURCES[1]}
             order=3 nj1=%d nj2=%d eps=2 verb=n niter=100'''%nj)
        #back rotate
        Flow(noiz2, signoi,'window n3=1 | lmostretch inv=y v0=%d half=n delay=0 | window f1=%d'%(Vo,padding))
        Flow(sign2,[signoi, mask, tilted, dat2],'''
             window f3=1 |
             add mode=p ${SOURCES[1]} | add scale=1,1,-1 ${SOURCES[2:4]} |
             lmostretch inv=y v0=%d half=n delay=0 | window f1=%d'''%(Vo, padding))
        Flow(lowf, sign2, 'bandpass fhi=8')
        Flow(Headers, 'RSF/TIB01_T', 'window f2=120*%s n2=120'%i)
        Flow(Offsets, Headers, 'headermath output="offset" | window')
        Flow(Statics, Headers,'headermath output="((-1*(%s-selev)/scalel)+(gelev-selev)/scalel)/%s"' %(MaxAlt,Vo))
        Flow(sign3,[sign2,lowf,Statics, Offsets],'add scale=1,-1 ${SOURCES[1]} | stretch rule=d datum=${SOURCES[2]} | mutter offset=${SOURCES[3]} V0=2000 | despike2 wide1=5 wide2=3')
        Flow(noiz3,[noiz2,lowf],'add ${SOURCES[1]}')

        #Plot(PShot, Shot, 'window max1=10 | grey title=%s gpow=1'%Shot)
        #Plot(Psign, sign3, 'window max1=10 | grey title=%s_signal gpow=1'%Shot)
        #Plot(Pnoiz,noiz3, 'window max1=10 | grey title=%s_noise gpow=1'%Shot)
        #Result(Compare, [PShot, Psign, Pnoiz],'SideBySideAniso')
Flow('Utils/Maskheader', MaskedShots, 'rcat ${SOURCES[1:-1]} axis=1')
Flow('RSF/Filt_line', All, 'rcat ${SOURCES[1:-1]} axis=2')
Flow('RSF/Masked_line', ['RSF/Filt_line', 'Utils/Maskheader'], 'headerwindow mask=${SOURCES[1]}')
Flow('RSF/CDPs','RSF/Masked_line', 'sfintbin axis=n2 xk=cdpx yk=cdpy mask="Utils/CDPs_mask.rsf" map="Utils/CDPs_map.rsf"')
# Flow('RSF/Brute_Stack', 'RSF/CDPs', 'stack axis=2')
V1= 1500.
V2= 9000.

for i in range(80,1652, 500):
#1387+80):
    cdp = 'CDP/cdp_%s'%i
    cdp_mask = 'CDP_Mask/cdp_Mask_%s'%i
    Sembl = 'Sembl/Sembl_%s'%i
    vpick = 'Vpick/Vpick_%s'%i
    vdip = 'Vdip/Vdip_%s'%i
    vseis = 'Vseis/Vseis_%s'%i
    Freq= 'Freq/Freq%s'%i
    Fmask = 'FMask/FMask_%s'%i
    Fmask2='FMask2/FMask2_%s'%i
    CdP2 = 'Cdp2/Cdp2_%s'%i
    Exp = 'Exp/Exp_%s_'%i
    CdP_Ndip = 'CdP_Ndip/CdP_Ndip_%s'%i
    CdP_Sdip = 'CdP_Sdip/CdP_Sdip_%s'%i
    Cl_cdp = 'Cl_cdp/Cl_cdp_%s'%i
    Dip0 = 'Dip0/Dip0_%s'%i
    Dip1 = 'Dip1/Dip1_%s'%i
    Dip2 = 'Dip2/Dip2_%s'%i
    Dip3 = 'Dip3/Dip3_%s'%i
    Dip05= 'Dip05/Dip05_%s'%i
    Vtr = 'Vtr/Vtr_%s'%i
    Vtk = 'Vtk/Vtk_%s'%i
    Pnmo = 'Pnmo/Pnmo_%s'%i
    Vel = 'Vel/Vel_%s'%i
    Dips0 = 'Dips0/Dips0_%s'%i
    Dips = 'Dips/Dips_%s'%i
    xdip = 'Xdip/Xdip_%s'%i
    hdip = 'Hdip/hdip_%s'%i
    mig = 'MigS/MigS_%s'%i
    Flow(cdp_mask, 'Utils/CDPs_mask.rsf','window f2=%s n2=1'%i)
    # add mute and median filter
    Flow(cdp, ['RSF/CDPs', cdp_mask], 'window f2=%s n2=1 | sfput d2=25 label2="Offset"| headerwindow mask=${SOURCES[1]} | bandpass flo=20 | despike2 wide1=7 wide2=7 | pow pow1=2'%i)
    # Flow(FMask, cdp, 'math output="input*input" | mask min=0.01')
    # Flow(Fmask2,Fmask,'dd type=float')
    # Flow(CdP2, [Fmask2, cdp], 'add mode=p ${SOURCES[1]}')
    # Flow(Freq, CdP2, 'twofreq2')
    # for case in range(2):
    #     eps=(0.1,5)[case]
    #     Flow(Exp+str(case), [CdP2, Freq])
    # Flow(CdP_Sdip, [Exp+str(1), Fmask], 'window n3=1 | dip verb=y order=2 rect1=10 rect2=10 mask=${SOURCES[1]}'))
    # Flow(CdP_Ndip, [Exp+str(2), Fmask], 'window n3=1 | dip verb=y order=2 rect1=10 rect2=10 mask=${SOURCES[1]}'))
    # Flow('sn',[CdP2, CdP_Ndip, CdP_Sdip, Freq],'explanesignoi niter=2000 verb=y ndip=${SOURCES[1]} sdip=${SOURCES[2]} freq=${SOURCES[3]} eps=0.01')
    Flow(Sembl, cdp, 'vscan semblance=y v0=%d dv=25 nv=250 half=y'%V1)
    Result(Sembl,'envelope | grey color=j scalebar=y')
    Flow(vpick, Sembl, 'scale axis=2 | pick rect1=40 | window')
    Flow(vdip,vpick,'v2d n=128 d=20 o=0 mute=y half=y v0=10000 t0=0.004 tp=0.1')
    #Flow(vseis,[cdp, vdip], 'seislet dip=${SOURCES[1]} type=b eps=0.01 adj=y inv=y unit=y')

    #Flow(Cl_cdp,[vseis, vdip],'threshold pclip=5 | seislet dip=${SOURCES[1]} type=b eps=0.01 adj=n inv=y unit=y  | mutter v0=4500 x0=0 abs=n')
    Flow(Dip0,cdp,dip(1./V1-1./V2))
    Flow(Dip1,cdp,dip(1./V2))
    Flow(Dip2,[cdp, Dip0, Dip1],'nmostretch half=y v0=%s | twodip2 dip1=${SOURCES[1]} q0=0 order=3 niter=10 eps=200 lam=40 | window n3=1 | math ref=${SOURCES[2]} output="input+ref" '%V1)
    Flow(Dip3, [cdp,Dip2], 'dip idip=${SOURCES[1]} order=3 niter=10 liter=100 rect=50 rect2=20 pmin=0')
    Flow([Pnmo,Vel], [cdp, Dip3], 'pnmo dip=${SOURCES[1]} vel=${TARGETS[1]}')
    Result(Pnmo, 'grey | envelope | sfgrey color=i scalebar=y')
    Flow(Dip05,Dip3,'window min2=500 | despike2 wide1=7 wide2=7')
    Flow(Vtr,[cdp, Dip05],'window min2=500 | pveltran v0=%d dv=10 nv=800 dip=${SOURCES[1]}'%V1)
    Flow(Vtk,Vtr, 'envelope | scale axis=2 | pick rect1=20 |  window min1=1.2 | remap1 pattern=$SOURCE order=2')
    #Flow(Dips0, Dip3, 'spray axis=3 n=250 d=0.0335 o=7.705')
    #Flow(Dips, [cdp, Dips0], 'dip idip=${SOURCES[1]} rect1=25 rect2=10 rect3=25')
    #Flow(hdip, Dips, 'window n4=1')
    #Flow(xdip, Dips, 'window f4=1')
    #Flow(mig, [cdp, hdip, xdip], 'pmig hdip=${SOURCES[1]} xdip=${SOURCES[2]}' )
#     #scroll through cdpy
# #'| window  n1=1500 f2=80 n2=1387 f3=15 n3=1382 squeeze=n')
# #Flow('RSF/Lines','RSF/Masked_line Utils/OffCdp', 'bin head=${SOURCES[1]mask="Utils/Cube_mask.rsf" map="Utils/Cube_map.rsf"} xmin=0 xmax=3000 dx=25 dy=1')

#Flow(['RSF/CDPs','Utils/Fold'], ['RSF/Masked_line.rsf', 'Utils/XYr'], 'bin dx=25 dy=1 interp=1 fold=${TARGETS[1]} head=${SOURCES[1]} xkey=0 ykey=1 ny=1 nx=500')

# Flow('RSF/CDP0s',['RSF/Masked_line.rsf', 'RSF/TIB01_T'], 'sfintbin axis=n2 xk=iline yk=cdp')

### will need to transform in half offsets
# Flow(['RSF/CDP2s','Utils/Fold'],['RSF/Masked_line.rsf', 'Utils/OffCdp'], 'bin nx=240 dx=50 x0=-6000 ny=3304 dx=1 x0=437 fold=${TARGETS[1]} head=${SOURCES[1]} xkey=0 ykey=1')
#
#Result('PCDP', 'CDPs', 'grey3 pclip=99.9 title="CDPs" flat=y movie=3')


#########TODO#####
 ###statics###
#Vo=?
#Flow(’statics’,’TIB01_T’,’headermath output="(gelev-selev)*%d/scalel" | math output="input" ’%Vo)
#Flow(’line_statics’,’line? statics’,’stretch rule=d datum=${SOURCES[1]}’)
###end_statics###

End()
